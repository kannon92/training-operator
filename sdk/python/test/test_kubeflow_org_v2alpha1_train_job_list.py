# coding: utf-8

"""
    Kubeflow Training SDK

    Python SDK for Kubeflow Training  # noqa: E501

    The version of the OpenAPI document: v1.7.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

from kubeflow.training.models import *
from kubeflow.training.models.kubeflow_org_v2alpha1_train_job_list import KubeflowOrgV2alpha1TrainJobList  # noqa: E501
from kubeflow.training.rest import ApiException

class TestKubeflowOrgV2alpha1TrainJobList(unittest.TestCase):
    """KubeflowOrgV2alpha1TrainJobList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test KubeflowOrgV2alpha1TrainJobList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubeflow.training.models.kubeflow_org_v2alpha1_train_job_list.KubeflowOrgV2alpha1TrainJobList()  # noqa: E501
        if include_optional :
            return KubeflowOrgV2alpha1TrainJobList(
                api_version = '0', 
                items = [
                    kubeflow.training.models.kubeflow/org/v2alpha1/train_job.kubeflow.org.v2alpha1.TrainJob(
                        api_version = '0', 
                        kind = '0', 
                        metadata = V1ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                V1ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = V1FieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    subresource = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                V1OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubeflow.training.models.kubeflow/org/v2alpha1/train_job_spec.kubeflow.org.v2alpha1.TrainJobSpec(
                            dataset_config = kubeflow.training.models.kubeflow/org/v2alpha1/dataset_config.kubeflow.org.v2alpha1.DatasetConfig(
                                env = [
                                    None
                                    ], 
                                secret_ref = None, 
                                storage_uri = '0', ), 
                            managed_by = '0', 
                            model_config = kubeflow.training.models.kubeflow/org/v2alpha1/model_config.kubeflow.org.v2alpha1.ModelConfig(
                                input = kubeflow.training.models.kubeflow/org/v2alpha1/input_model.kubeflow.org.v2alpha1.InputModel(
                                    secret_ref = None, 
                                    storage_uri = '0', ), 
                                output = kubeflow.training.models.kubeflow/org/v2alpha1/output_model.kubeflow.org.v2alpha1.OutputModel(
                                    secret_ref = None, 
                                    storage_uri = '0', ), ), 
                            pod_spec_overrides = [
                                kubeflow.training.models.kubeflow/org/v2alpha1/pod_spec_override.kubeflow.org.v2alpha1.PodSpecOverride(
                                    containers = [
                                        kubeflow.training.models.kubeflow/org/v2alpha1/container_override.kubeflow.org.v2alpha1.ContainerOverride(
                                            args = [
                                                '0'
                                                ], 
                                            command = [
                                                '0'
                                                ], 
                                            env_from = [
                                                None
                                                ], 
                                            name = '0', 
                                            volume_mounts = [
                                                None
                                                ], )
                                        ], 
                                    init_containers = [
                                        kubeflow.training.models.kubeflow/org/v2alpha1/container_override.kubeflow.org.v2alpha1.ContainerOverride(
                                            name = '0', )
                                        ], 
                                    node_selector = {
                                        'key' : '0'
                                        }, 
                                    service_account_name = '0', 
                                    target_jobs = [
                                        kubeflow.training.models.kubeflow/org/v2alpha1/pod_spec_override_target_job.kubeflow.org.v2alpha1.PodSpecOverrideTargetJob(
                                            name = '0', )
                                        ], 
                                    tolerations = [
                                        None
                                        ], 
                                    volumes = [
                                        None
                                        ], )
                                ], 
                            runtime_ref = kubeflow.training.models.kubeflow/org/v2alpha1/runtime_ref.kubeflow.org.v2alpha1.RuntimeRef(
                                api_group = '0', 
                                kind = '0', 
                                name = '0', ), 
                            suspend = True, 
                            trainer = kubeflow.training.models.kubeflow/org/v2alpha1/trainer.kubeflow.org.v2alpha1.Trainer(
                                image = '0', 
                                num_nodes = 56, 
                                num_proc_per_node = '0', 
                                resources_per_node = None, ), ), 
                        status = kubeflow.training.models.kubeflow/org/v2alpha1/train_job_status.kubeflow.org.v2alpha1.TrainJobStatus(
                            conditions = [
                                V1Condition(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '0', 
                                    observed_generation = 56, 
                                    reason = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            jobs_status = [
                                kubeflow.training.models.kubeflow/org/v2alpha1/job_status.kubeflow.org.v2alpha1.JobStatus(
                                    active = 56, 
                                    failed = 56, 
                                    name = '0', 
                                    ready = 56, 
                                    succeeded = 56, 
                                    suspended = 56, )
                                ], ), )
                    ], 
                kind = '0', 
                metadata = V1ListMeta(
                    continue = '0', 
                    remaining_item_count = 56, 
                    resource_version = '0', 
                    self_link = '0', )
            )
        else :
            return KubeflowOrgV2alpha1TrainJobList(
                items = [
                    kubeflow.training.models.kubeflow/org/v2alpha1/train_job.kubeflow.org.v2alpha1.TrainJob(
                        api_version = '0', 
                        kind = '0', 
                        metadata = V1ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                V1ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = V1FieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    subresource = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                V1OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubeflow.training.models.kubeflow/org/v2alpha1/train_job_spec.kubeflow.org.v2alpha1.TrainJobSpec(
                            dataset_config = kubeflow.training.models.kubeflow/org/v2alpha1/dataset_config.kubeflow.org.v2alpha1.DatasetConfig(
                                env = [
                                    None
                                    ], 
                                secret_ref = None, 
                                storage_uri = '0', ), 
                            managed_by = '0', 
                            model_config = kubeflow.training.models.kubeflow/org/v2alpha1/model_config.kubeflow.org.v2alpha1.ModelConfig(
                                input = kubeflow.training.models.kubeflow/org/v2alpha1/input_model.kubeflow.org.v2alpha1.InputModel(
                                    secret_ref = None, 
                                    storage_uri = '0', ), 
                                output = kubeflow.training.models.kubeflow/org/v2alpha1/output_model.kubeflow.org.v2alpha1.OutputModel(
                                    secret_ref = None, 
                                    storage_uri = '0', ), ), 
                            pod_spec_overrides = [
                                kubeflow.training.models.kubeflow/org/v2alpha1/pod_spec_override.kubeflow.org.v2alpha1.PodSpecOverride(
                                    containers = [
                                        kubeflow.training.models.kubeflow/org/v2alpha1/container_override.kubeflow.org.v2alpha1.ContainerOverride(
                                            args = [
                                                '0'
                                                ], 
                                            command = [
                                                '0'
                                                ], 
                                            env_from = [
                                                None
                                                ], 
                                            name = '0', 
                                            volume_mounts = [
                                                None
                                                ], )
                                        ], 
                                    init_containers = [
                                        kubeflow.training.models.kubeflow/org/v2alpha1/container_override.kubeflow.org.v2alpha1.ContainerOverride(
                                            name = '0', )
                                        ], 
                                    node_selector = {
                                        'key' : '0'
                                        }, 
                                    service_account_name = '0', 
                                    target_jobs = [
                                        kubeflow.training.models.kubeflow/org/v2alpha1/pod_spec_override_target_job.kubeflow.org.v2alpha1.PodSpecOverrideTargetJob(
                                            name = '0', )
                                        ], 
                                    tolerations = [
                                        None
                                        ], 
                                    volumes = [
                                        None
                                        ], )
                                ], 
                            runtime_ref = kubeflow.training.models.kubeflow/org/v2alpha1/runtime_ref.kubeflow.org.v2alpha1.RuntimeRef(
                                api_group = '0', 
                                kind = '0', 
                                name = '0', ), 
                            suspend = True, 
                            trainer = kubeflow.training.models.kubeflow/org/v2alpha1/trainer.kubeflow.org.v2alpha1.Trainer(
                                image = '0', 
                                num_nodes = 56, 
                                num_proc_per_node = '0', 
                                resources_per_node = None, ), ), 
                        status = kubeflow.training.models.kubeflow/org/v2alpha1/train_job_status.kubeflow.org.v2alpha1.TrainJobStatus(
                            conditions = [
                                V1Condition(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '0', 
                                    observed_generation = 56, 
                                    reason = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            jobs_status = [
                                kubeflow.training.models.kubeflow/org/v2alpha1/job_status.kubeflow.org.v2alpha1.JobStatus(
                                    active = 56, 
                                    failed = 56, 
                                    name = '0', 
                                    ready = 56, 
                                    succeeded = 56, 
                                    suspended = 56, )
                                ], ), )
                    ],
        )

    def testKubeflowOrgV2alpha1TrainJobList(self):
        """Test KubeflowOrgV2alpha1TrainJobList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
