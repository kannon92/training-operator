# coding: utf-8

"""
    Kubeflow Training SDK

    Python SDK for Kubeflow Training  # noqa: E501

    The version of the OpenAPI document: v1.7.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

from kubeflow.training.models import *
from kubeflow.training.models.kubeflow_org_v2alpha1_cluster_training_runtime import KubeflowOrgV2alpha1ClusterTrainingRuntime  # noqa: E501
from kubeflow.training.rest import ApiException

class TestKubeflowOrgV2alpha1ClusterTrainingRuntime(unittest.TestCase):
    """KubeflowOrgV2alpha1ClusterTrainingRuntime unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test KubeflowOrgV2alpha1ClusterTrainingRuntime
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubeflow.training.models.kubeflow_org_v2alpha1_cluster_training_runtime.KubeflowOrgV2alpha1ClusterTrainingRuntime()  # noqa: E501
        if include_optional :
            return KubeflowOrgV2alpha1ClusterTrainingRuntime(
                api_version = '0', 
                kind = '0', 
                metadata = V1ObjectMeta(
                    annotations = {
                        'key' : '0'
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        '0'
                        ], 
                    generate_name = '0', 
                    generation = 56, 
                    labels = {
                        'key' : '0'
                        }, 
                    managed_fields = [
                        V1ManagedFieldsEntry(
                            api_version = '0', 
                            fields_type = '0', 
                            fields_v1 = V1FieldsV1(), 
                            manager = '0', 
                            operation = '0', 
                            subresource = '0', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '0', 
                    namespace = '0', 
                    owner_references = [
                        V1OwnerReference(
                            api_version = '0', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '0', 
                            name = '0', 
                            uid = '0', )
                        ], 
                    resource_version = '0', 
                    self_link = '0', 
                    uid = '0', ), 
                spec = kubeflow.training.models.kubeflow/org/v2alpha1/training_runtime_spec.kubeflow.org.v2alpha1.TrainingRuntimeSpec(
                    ml_policy = kubeflow.training.models.kubeflow/org/v2alpha1/ml_policy.kubeflow.org.v2alpha1.MLPolicy(
                        mpi = kubeflow.training.models.kubeflow/org/v2alpha1/mpiml_policy_source.kubeflow.org.v2alpha1.MPIMLPolicySource(
                            ssh_auth_mount_path = '0', 
                            mpi_implementation = '0', 
                            num_proc_per_node = 56, 
                            run_launcher_as_node = True, ), 
                        num_nodes = 56, 
                        torch = kubeflow.training.models.kubeflow/org/v2alpha1/torch_ml_policy_source.kubeflow.org.v2alpha1.TorchMLPolicySource(
                            elastic_policy = kubeflow.training.models.kubeflow/org/v2alpha1/torch_elastic_policy.kubeflow.org.v2alpha1.TorchElasticPolicy(
                                max_nodes = 56, 
                                max_restarts = 56, 
                                metrics = [
                                    None
                                    ], 
                                min_nodes = 56, ), 
                            num_proc_per_node = '0', ), ), 
                    pod_group_policy = kubeflow.training.models.kubeflow/org/v2alpha1/pod_group_policy.kubeflow.org.v2alpha1.PodGroupPolicy(
                        coscheduling = kubeflow.training.models.kubeflow/org/v2alpha1/coscheduling_pod_group_policy_source.kubeflow.org.v2alpha1.CoschedulingPodGroupPolicySource(
                            schedule_timeout_seconds = 56, ), ), 
                    template = kubeflow.training.models.kubeflow/org/v2alpha1/job_set_template_spec.kubeflow.org.v2alpha1.JobSetTemplateSpec(
                        metadata = V1ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                V1ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = V1FieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    subresource = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                V1OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = None, ), )
            )
        else :
            return KubeflowOrgV2alpha1ClusterTrainingRuntime(
        )

    def testKubeflowOrgV2alpha1ClusterTrainingRuntime(self):
        """Test KubeflowOrgV2alpha1ClusterTrainingRuntime"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
