# coding: utf-8

"""
    Kubeflow Training SDK

    Python SDK for Kubeflow Training  # noqa: E501

    The version of the OpenAPI document: v1.7.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

from kubeflow.training.models import *
from kubeflow.training.models.kubeflow_org_v2alpha1_train_job_spec import KubeflowOrgV2alpha1TrainJobSpec  # noqa: E501
from kubeflow.training.rest import ApiException

class TestKubeflowOrgV2alpha1TrainJobSpec(unittest.TestCase):
    """KubeflowOrgV2alpha1TrainJobSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test KubeflowOrgV2alpha1TrainJobSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubeflow.training.models.kubeflow_org_v2alpha1_train_job_spec.KubeflowOrgV2alpha1TrainJobSpec()  # noqa: E501
        if include_optional :
            return KubeflowOrgV2alpha1TrainJobSpec(
                annotations = {
                    'key' : '0'
                    }, 
                dataset_config = kubeflow.training.models.kubeflow/org/v2alpha1/dataset_config.kubeflow.org.v2alpha1.DatasetConfig(
                    env = [
                        None
                        ], 
                    secret_ref = None, 
                    storage_uri = '0', ), 
                labels = {
                    'key' : '0'
                    }, 
                managed_by = '0', 
                model_config = kubeflow.training.models.kubeflow/org/v2alpha1/model_config.kubeflow.org.v2alpha1.ModelConfig(
                    input = kubeflow.training.models.kubeflow/org/v2alpha1/input_model.kubeflow.org.v2alpha1.InputModel(
                        env = [
                            None
                            ], 
                        secret_ref = None, 
                        storage_uri = '0', ), 
                    output = kubeflow.training.models.kubeflow/org/v2alpha1/output_model.kubeflow.org.v2alpha1.OutputModel(
                        secret_ref = None, 
                        storage_uri = '0', ), ), 
                pod_spec_overrides = [
                    kubeflow.training.models.kubeflow/org/v2alpha1/pod_spec_override.kubeflow.org.v2alpha1.PodSpecOverride(
                        containers = [
                            kubeflow.training.models.kubeflow/org/v2alpha1/container_override.kubeflow.org.v2alpha1.ContainerOverride(
                                args = [
                                    '0'
                                    ], 
                                command = [
                                    '0'
                                    ], 
                                env = [
                                    None
                                    ], 
                                env_from = [
                                    None
                                    ], 
                                name = '0', 
                                volume_mounts = [
                                    None
                                    ], )
                            ], 
                        init_containers = [
                            kubeflow.training.models.kubeflow/org/v2alpha1/container_override.kubeflow.org.v2alpha1.ContainerOverride(
                                name = '0', )
                            ], 
                        node_selector = {
                            'key' : '0'
                            }, 
                        service_account_name = '0', 
                        target_jobs = [
                            kubeflow.training.models.kubeflow/org/v2alpha1/pod_spec_override_target_job.kubeflow.org.v2alpha1.PodSpecOverrideTargetJob(
                                name = '0', )
                            ], 
                        tolerations = [
                            None
                            ], 
                        volumes = [
                            None
                            ], )
                    ], 
                runtime_ref = kubeflow.training.models.kubeflow/org/v2alpha1/runtime_ref.kubeflow.org.v2alpha1.RuntimeRef(
                    api_group = '0', 
                    kind = '0', 
                    name = '0', ), 
                suspend = True, 
                trainer = kubeflow.training.models.kubeflow/org/v2alpha1/trainer.kubeflow.org.v2alpha1.Trainer(
                    args = [
                        '0'
                        ], 
                    command = [
                        '0'
                        ], 
                    env = [
                        None
                        ], 
                    image = '0', 
                    num_nodes = 56, 
                    num_proc_per_node = '0', 
                    resources_per_node = None, )
            )
        else :
            return KubeflowOrgV2alpha1TrainJobSpec(
                runtime_ref = kubeflow.training.models.kubeflow/org/v2alpha1/runtime_ref.kubeflow.org.v2alpha1.RuntimeRef(
                    api_group = '0', 
                    kind = '0', 
                    name = '0', ),
        )

    def testKubeflowOrgV2alpha1TrainJobSpec(self):
        """Test KubeflowOrgV2alpha1TrainJobSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
